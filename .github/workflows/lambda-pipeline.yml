name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - ci/Cd
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false
          installer-parallel: true
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Lint with Ruff
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff
          ruff check --output-format=github .
        continue-on-error: true
      - name: Run tests
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          pytest --cov-report term-missing --cov=lambda_app/ tests/
        continue-on-error: true

  build-container:
    runs-on: ubuntu-latest
    needs: build-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/lambda-app:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/lambda-app:latest

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-container
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install k3d and kubectl
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
          sudo apt-get install -y kubectl

      - name: Create k3d cluster
        run: |
          k3d cluster create mycluster \
            --registry-create mycluster:5000 \
            -p 5432:5432@loadbalancer

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Pull Docker image from Docker Hub
        run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/lambda-app:latest

      - name: Tag and push Docker image to cluster registry
        run: |
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/lambda-app:latest localhost:5000/lambda-app:latest
          docker push localhost:5000/lambda-app:latest

      - name: Deploy application to Kubernetes
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/lambda-app

      - name: Test deployed application with curl
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"body": "{\"message\": \"Hello Lambda\"}"}' http://localhost:5432/2015-03-31/functions/function/invocations)
          if [ "$response" -ne 200 ]; then
            echo "Test failed with response code $response"
            exit 1
          fi

      - name: Clean up k3d cluster
        if: always()
        run: k3d cluster delete mycluster